<Application x:Class="WPFUI.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:WPFUI"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <Color x:Key="DisabledControlColor">#FFC0C0CE</Color>
        <Color x:Key="DisabledForegroundColor">#FFAFA3B9</Color>
        <Color x:Key="ControlNormalColor">#FFF2F2F2</Color>
        <Color x:Key="ControlMouseOverColor">WhiteSmoke</Color>
        <Color x:Key="ControlPressedColor">#FFFFFFFF</Color>

        <local:ListToStringConverter x:Key="ListConverter" />
        <local:IsNullToVisibleConverter x:Key="IsNullConverter" />
        <Style TargetType="ListBox">
            <Setter Property="Background" Value="WhiteSmoke" />
            <Setter Property="Opacity" Value="0.75" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Editable, Converter={StaticResource IsNullConverter}}"
                             Value="False">
                    <Setter Property="IsEnabled" Value="False" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="Grid" x:Key="DGrid">
            <Setter Property="Background" Value="WhiteSmoke" />
            <Setter Property="Opacity" Value="0.8" />
        </Style>
        <Style TargetType="TextBlock">
            <Setter Property="Padding" Value="5,5,5,5" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Foreground" Value="DimGray" />
        </Style>
        <Style TargetType="Label">
            <Setter Property="Padding" Value="5,5,5,5" />
            <Setter Property="FontWeight" Value="ExtraBold" />
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>
        <Style TargetType="TextBox">
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <DockPanel LastChildFill="True">
                            <ListBox DockPanel.Dock="Right" Name="lstErrors" Margin="0" Padding="0" Background="Transparent" BorderBrush="Transparent"
                                     ItemsSource="{Binding ElementName=ErrTextBox, Path=AdornedElement.(Validation.Errors)}">
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding ErrorContent}" Foreground="DarkOrange" Padding="1" Background="AntiqueWhite"/>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                            <Grid DockPanel.Dock="Left">
                                <Ellipse Width="20" Height="20" Stroke="Crimson" Fill="DarkRed" />
                                <Label
                                    Content="{Binding ElementName=ErrTextBox, Path=AdornedElement.(Validation.Errors).Count}"
                                    Foreground="White" />
                            </Grid>
                            <Border BorderBrush="Crimson">
                                <AdornedElementPlaceholder Name="ErrTextBox" />
                            </Border>
                        </DockPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="BtnStyle">
            <Setter Property="Margin" Value="5" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="MinHeight" Value="29px" />
            <Setter Property="MinWidth"  Value="103px" />
            <Setter Property="Foreground" Value="#FFFFFFFF" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border TextBlock.Foreground="{TemplateBinding Foreground}" x:Name="Border">
                            <Border.Background>
                                <SolidColorBrush  Color="{DynamicResource ControlNormalColor}" />
                            </Border.Background>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.1" />
                                        <VisualTransition GeneratedDuration="0" To="Pressed" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                Storyboard.TargetName="Border">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlMouseOverColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                Storyboard.TargetName="Border">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlPressedColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                Storyboard.TargetName="Border">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledControlColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                                                Storyboard.TargetName="Border">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledForegroundColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ContentPresenter Margin="2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type StackPanel}" x:Key="CurrentPanel">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="Visibility" Value="Collapsed" />
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=Current, Converter={StaticResource IsNullConverter}}"
                                   Value="False" />
                        <Condition Binding="{Binding Path=Editable, Converter={StaticResource IsNullConverter}}"
                                   Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Visibility" Value="Visible" />
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type StackPanel}" x:Key="EditablePanel">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="Visibility" Value="Collapsed" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Editable, Converter={StaticResource IsNullConverter}}"
                             Value="False">
                    <Setter Property="Visibility" Value="Visible" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="AddButton" BasedOn="{StaticResource BtnStyle}">
            <Setter Property="Visibility" Value="Collapsed" />
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=Editable, Converter={StaticResource IsNullConverter}}"
                                   Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Visibility" Value="Visible" />
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="EditButton" BasedOn="{StaticResource BtnStyle}">
            <Setter Property="Visibility" Value="Collapsed" />
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=Current, Converter={StaticResource IsNullConverter}}"
                                   Value="False" />
                        <Condition Binding="{Binding Path=Editable, Converter={StaticResource IsNullConverter}}"
                                   Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Visibility" Value="Visible" />
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="CommitButton" BasedOn="{StaticResource BtnStyle}">
            <Setter Property="Visibility" Value="Collapsed" />
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=Editable, Converter={StaticResource IsNullConverter}}"
                                   Value="False" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Visibility" Value="Visible" />
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="CancelButton" BasedOn="{StaticResource BtnStyle}">
            <Setter Property="Visibility" Value="Collapsed" />
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=Editable, Converter={StaticResource IsNullConverter}}"
                                   Value="False" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Visibility" Value="Visible" />
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>

    </Application.Resources>
</Application>















